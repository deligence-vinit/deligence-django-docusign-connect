# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cell_phone_number=None, country_code=None, credentials=None, display_name=None, email=None, external_claims=None):
        """
        User - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cell_phone_number': 'str',
            'country_code': 'str',
            'credentials': 'list[Credential]',
            'display_name': 'str',
            'email': 'str',
            'external_claims': 'list[ExternalClaim]'
        }

        self.attribute_map = {
            'cell_phone_number': 'cellPhoneNumber',
            'country_code': 'countryCode',
            'credentials': 'credentials',
            'display_name': 'displayName',
            'email': 'email',
            'external_claims': 'externalClaims'
        }

        self._cell_phone_number = cell_phone_number
        self._country_code = country_code
        self._credentials = credentials
        self._display_name = display_name
        self._email = email
        self._external_claims = external_claims

    @property
    def cell_phone_number(self):
        """
        Gets the cell_phone_number of this User.
        

        :return: The cell_phone_number of this User.
        :rtype: str
        """
        return self._cell_phone_number

    @cell_phone_number.setter
    def cell_phone_number(self, cell_phone_number):
        """
        Sets the cell_phone_number of this User.
        

        :param cell_phone_number: The cell_phone_number of this User.
        :type: str
        """

        self._cell_phone_number = cell_phone_number

    @property
    def country_code(self):
        """
        Gets the country_code of this User.
        

        :return: The country_code of this User.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this User.
        

        :param country_code: The country_code of this User.
        :type: str
        """

        self._country_code = country_code

    @property
    def credentials(self):
        """
        Gets the credentials of this User.
        

        :return: The credentials of this User.
        :rtype: list[Credential]
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """
        Sets the credentials of this User.
        

        :param credentials: The credentials of this User.
        :type: list[Credential]
        """

        self._credentials = credentials

    @property
    def display_name(self):
        """
        Gets the display_name of this User.
        

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this User.
        

        :param display_name: The display_name of this User.
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """
        Gets the email of this User.
        

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this User.
        

        :param email: The email of this User.
        :type: str
        """

        self._email = email

    @property
    def external_claims(self):
        """
        Gets the external_claims of this User.
        

        :return: The external_claims of this User.
        :rtype: list[ExternalClaim]
        """
        return self._external_claims

    @external_claims.setter
    def external_claims(self, external_claims):
        """
        Sets the external_claims of this User.
        

        :param external_claims: The external_claims of this User.
        :type: list[ExternalClaim]
        """

        self._external_claims = external_claims

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
