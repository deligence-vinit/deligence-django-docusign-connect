# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OcrRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ocr_language=None, page_selection=None, set_page_orientation=None, show_frames=None, show_text=None, skip_pages_having_existing_extractable_text=None):
        """
        OcrRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ocr_language': 'str',
            'page_selection': 'str',
            'set_page_orientation': 'str',
            'show_frames': 'str',
            'show_text': 'str',
            'skip_pages_having_existing_extractable_text': 'str'
        }

        self.attribute_map = {
            'ocr_language': 'ocrLanguage',
            'page_selection': 'pageSelection',
            'set_page_orientation': 'setPageOrientation',
            'show_frames': 'showFrames',
            'show_text': 'showText',
            'skip_pages_having_existing_extractable_text': 'skipPagesHavingExistingExtractableText'
        }

        self._ocr_language = ocr_language
        self._page_selection = page_selection
        self._set_page_orientation = set_page_orientation
        self._show_frames = show_frames
        self._show_text = show_text
        self._skip_pages_having_existing_extractable_text = skip_pages_having_existing_extractable_text

    @property
    def ocr_language(self):
        """
        Gets the ocr_language of this OcrRequest.
        

        :return: The ocr_language of this OcrRequest.
        :rtype: str
        """
        return self._ocr_language

    @ocr_language.setter
    def ocr_language(self, ocr_language):
        """
        Sets the ocr_language of this OcrRequest.
        

        :param ocr_language: The ocr_language of this OcrRequest.
        :type: str
        """

        self._ocr_language = ocr_language

    @property
    def page_selection(self):
        """
        Gets the page_selection of this OcrRequest.
        

        :return: The page_selection of this OcrRequest.
        :rtype: str
        """
        return self._page_selection

    @page_selection.setter
    def page_selection(self, page_selection):
        """
        Sets the page_selection of this OcrRequest.
        

        :param page_selection: The page_selection of this OcrRequest.
        :type: str
        """

        self._page_selection = page_selection

    @property
    def set_page_orientation(self):
        """
        Gets the set_page_orientation of this OcrRequest.
        

        :return: The set_page_orientation of this OcrRequest.
        :rtype: str
        """
        return self._set_page_orientation

    @set_page_orientation.setter
    def set_page_orientation(self, set_page_orientation):
        """
        Sets the set_page_orientation of this OcrRequest.
        

        :param set_page_orientation: The set_page_orientation of this OcrRequest.
        :type: str
        """

        self._set_page_orientation = set_page_orientation

    @property
    def show_frames(self):
        """
        Gets the show_frames of this OcrRequest.
        

        :return: The show_frames of this OcrRequest.
        :rtype: str
        """
        return self._show_frames

    @show_frames.setter
    def show_frames(self, show_frames):
        """
        Sets the show_frames of this OcrRequest.
        

        :param show_frames: The show_frames of this OcrRequest.
        :type: str
        """

        self._show_frames = show_frames

    @property
    def show_text(self):
        """
        Gets the show_text of this OcrRequest.
        

        :return: The show_text of this OcrRequest.
        :rtype: str
        """
        return self._show_text

    @show_text.setter
    def show_text(self, show_text):
        """
        Sets the show_text of this OcrRequest.
        

        :param show_text: The show_text of this OcrRequest.
        :type: str
        """

        self._show_text = show_text

    @property
    def skip_pages_having_existing_extractable_text(self):
        """
        Gets the skip_pages_having_existing_extractable_text of this OcrRequest.
        

        :return: The skip_pages_having_existing_extractable_text of this OcrRequest.
        :rtype: str
        """
        return self._skip_pages_having_existing_extractable_text

    @skip_pages_having_existing_extractable_text.setter
    def skip_pages_having_existing_extractable_text(self, skip_pages_having_existing_extractable_text):
        """
        Sets the skip_pages_having_existing_extractable_text of this OcrRequest.
        

        :param skip_pages_having_existing_extractable_text: The skip_pages_having_existing_extractable_text of this OcrRequest.
        :type: str
        """

        self._skip_pages_having_existing_extractable_text = skip_pages_having_existing_extractable_text

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
