# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DisplayApplianceAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_id=None, opt_out_auto_nav_text_and_tab_color_updates=None, show_initial_conditional_fields=None, signing_version=None, tag_has_sig_block=None):
        """
        DisplayApplianceAccount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_id': 'str',
            'opt_out_auto_nav_text_and_tab_color_updates': 'bool',
            'show_initial_conditional_fields': 'bool',
            'signing_version': 'str',
            'tag_has_sig_block': 'bool'
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'opt_out_auto_nav_text_and_tab_color_updates': 'optOutAutoNavTextAndTabColorUpdates',
            'show_initial_conditional_fields': 'showInitialConditionalFields',
            'signing_version': 'signingVersion',
            'tag_has_sig_block': 'tagHasSigBlock'
        }

        self._account_id = account_id
        self._opt_out_auto_nav_text_and_tab_color_updates = opt_out_auto_nav_text_and_tab_color_updates
        self._show_initial_conditional_fields = show_initial_conditional_fields
        self._signing_version = signing_version
        self._tag_has_sig_block = tag_has_sig_block

    @property
    def account_id(self):
        """
        Gets the account_id of this DisplayApplianceAccount.
        The account ID associated with the envelope.

        :return: The account_id of this DisplayApplianceAccount.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this DisplayApplianceAccount.
        The account ID associated with the envelope.

        :param account_id: The account_id of this DisplayApplianceAccount.
        :type: str
        """

        self._account_id = account_id

    @property
    def opt_out_auto_nav_text_and_tab_color_updates(self):
        """
        Gets the opt_out_auto_nav_text_and_tab_color_updates of this DisplayApplianceAccount.
        

        :return: The opt_out_auto_nav_text_and_tab_color_updates of this DisplayApplianceAccount.
        :rtype: bool
        """
        return self._opt_out_auto_nav_text_and_tab_color_updates

    @opt_out_auto_nav_text_and_tab_color_updates.setter
    def opt_out_auto_nav_text_and_tab_color_updates(self, opt_out_auto_nav_text_and_tab_color_updates):
        """
        Sets the opt_out_auto_nav_text_and_tab_color_updates of this DisplayApplianceAccount.
        

        :param opt_out_auto_nav_text_and_tab_color_updates: The opt_out_auto_nav_text_and_tab_color_updates of this DisplayApplianceAccount.
        :type: bool
        """

        self._opt_out_auto_nav_text_and_tab_color_updates = opt_out_auto_nav_text_and_tab_color_updates

    @property
    def show_initial_conditional_fields(self):
        """
        Gets the show_initial_conditional_fields of this DisplayApplianceAccount.
        

        :return: The show_initial_conditional_fields of this DisplayApplianceAccount.
        :rtype: bool
        """
        return self._show_initial_conditional_fields

    @show_initial_conditional_fields.setter
    def show_initial_conditional_fields(self, show_initial_conditional_fields):
        """
        Sets the show_initial_conditional_fields of this DisplayApplianceAccount.
        

        :param show_initial_conditional_fields: The show_initial_conditional_fields of this DisplayApplianceAccount.
        :type: bool
        """

        self._show_initial_conditional_fields = show_initial_conditional_fields

    @property
    def signing_version(self):
        """
        Gets the signing_version of this DisplayApplianceAccount.
        

        :return: The signing_version of this DisplayApplianceAccount.
        :rtype: str
        """
        return self._signing_version

    @signing_version.setter
    def signing_version(self, signing_version):
        """
        Sets the signing_version of this DisplayApplianceAccount.
        

        :param signing_version: The signing_version of this DisplayApplianceAccount.
        :type: str
        """

        self._signing_version = signing_version

    @property
    def tag_has_sig_block(self):
        """
        Gets the tag_has_sig_block of this DisplayApplianceAccount.
        

        :return: The tag_has_sig_block of this DisplayApplianceAccount.
        :rtype: bool
        """
        return self._tag_has_sig_block

    @tag_has_sig_block.setter
    def tag_has_sig_block(self, tag_has_sig_block):
        """
        Sets the tag_has_sig_block of this DisplayApplianceAccount.
        

        :param tag_has_sig_block: The tag_has_sig_block of this DisplayApplianceAccount.
        :type: bool
        """

        self._tag_has_sig_block = tag_has_sig_block

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
